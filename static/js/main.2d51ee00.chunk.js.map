{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","Highcharts","options","exporting","chartOptions","plotOptions","series","dataLabels","enabled","fallbackToExportServer","title","text","name","data","exportImage","obj","JSON","stringify","type","dataString","exportUrl","encodeURI","window","XDomainRequest","xdr","XMLHttpRequest","open","onload","console","log","responseText","$","html","send","ajax","url","success","error","err","statusText","App","className","id","onClick","highcharts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAMAA,EAAQ,GAARA,CAAgDC,KAChDD,EAAQ,GAARA,CAA0CC,KAC1CD,EAAQ,GAARA,CAAwCC,KACxCD,EAAQ,GAARA,CAA0CC,KAE1C,IAAMC,EAAU,CACdC,UAAW,CACTC,aAAc,CACVC,YAAa,CACTC,OAAQ,CACJC,WAAY,CACRC,SAAS,MAKzBC,wBAAwB,GAE1BC,MAAO,CACLC,KAAM,iBAERL,OAAQ,CACN,CACAM,KAAM,SACNC,KAAM,CAAC,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,MAEzC,CACED,KAAM,OACNC,KAAM,CAAC,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,QAK5C,SAASC,IACP,IAAIC,EAAM,GACVA,EAAIb,QAAUc,KAAKC,UAAUf,GAC7Ba,EAAIG,KAAO,YACXH,EAAIL,MAAQ,QAEZ,IAEIS,EAFAC,EAAY,gCAKhB,GAFAD,EAAaE,UAAU,yCAA2CN,EAAIb,SAElEoB,OAAOC,eAAgB,CACzB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQN,EAAW,IAAMD,GAAY,GAC9CK,EAAIG,OAAS,WACTC,QAAQC,IAAIL,EAAIM,cAChBC,IAAE,cAAcC,KAAK,aAAeZ,EAAYI,EAAIM,aAAe,QAEvEN,EAAIS,YAEJF,IAAEG,KAAK,CACHhB,KAAM,OACNL,KAAMM,EACNgB,IAAKf,EACLgB,QAAS,SAAUvB,GACfe,QAAQC,IAAI,mCAAoChB,GAChDkB,IAAE,cAAcC,KAAK,aAAeZ,EAAYP,EAAO,QAE3DwB,MAAO,SAAUC,GACbV,QAAQC,IAAI,QAASS,EAAIC,eAiBtBC,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,IAAD,CAAQC,GAAG,iBAAiBC,QAAS7B,EAArC,sBACA,qBAAK4B,GAAG,YAAR,SACE,cAAC,IAAD,CAAiBE,WAAY3C,IAAYC,QAASA,UCnE3C2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d51ee00.chunk.js","sourcesContent":["import './App.css';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport Button from '@material-ui/core/Button/Button';\nimport $ from 'jquery'; \n\nrequire('highcharts/modules/offline-exporting')(Highcharts);\nrequire('highcharts/modules/export-data')(Highcharts);\nrequire('highcharts/modules/exporting')(Highcharts);\nrequire('highcharts/modules/annotations')(Highcharts);\n\nconst options = {\n  exporting: {\n    chartOptions: {\n        plotOptions: {\n            series: {\n                dataLabels: {\n                    enabled: true\n                }\n            }\n        }\n    },\n    fallbackToExportServer: false\n  },\n  title: {\n    text: \"Profit & Loss\"\n  },\n  series: [\n    {\n    name: 'Profit',\n    data: [100, 200, 300, 50, 250, 110, 120, 150]\n    },\n    {\n      name: 'Loss',\n      data: [40, 80, 200, 80, 200, 50, 110, 120]\n    }\n  ]\n};\n\nfunction exportImage() {\n  var obj = {};\n  obj.options = JSON.stringify(options);\n  obj.type = 'image/png';\n  obj.title = 'Chart';\n\n  var exportUrl = 'http://export.highcharts.com/';\n\n  let dataString = '';\n  dataString = encodeURI('async=true&type=png&width=400&options=' + obj.options);\n\n  if (window.XDomainRequest) {\n    var xdr = new XMLHttpRequest();\n    xdr.open('POST', exportUrl+ '?' + dataString, true);\n    xdr.onload = function () {\n        console.log(xdr.responseText);\n        $('#container').html('<img src=\"' + exportUrl + xdr.responseText + '\"/>');\n    };\n    xdr.send();\n  } else {\n    $.ajax({\n        type: 'POST',\n        data: dataString,\n        url: exportUrl,\n        success: function (data) {\n            console.log('get the file from relative url: ', data);\n            $('#container').html('<img src=\"' + exportUrl + data + '\"/>');\n        },\n        error: function (err) {\n            console.log('error', err.statusText)\n        }\n    });\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button id=\"downloadButton\" onClick={exportImage}>Download</Button>\n      <div id=\"container\">\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals.js'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}